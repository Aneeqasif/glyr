---
title: Commandline arguments
layout: post
---
<meta name="Generator" content="Vim/7.3">
<meta name="plugin-version" content="vim7.3_v10">
<meta name="syntax" content="ruby">
<meta name="settings" content="number_lines,use_css,expand_tabs">
<style type="text/css">
<!--
pre { font-family: monospace; color: #d0d0d0; background-color: #1c1c1c; }
body { font-family: monospace; color: #d0d0d0; background-color: #1c1c1c; }
.lnr { color: #a8a8a8; background-color: #080808; }
.Conditional { color: #8787ff; }
.String { color: #87af5f; background-color: #121212; }
.rubyStringDelimiter { color: #afaf5f; }
.rubyConstant { color: #d75f5f; }
-->
</style>

h2. Commandline arguments

You might want to read "the README":https://github.com/sahib/glyr first.

h2.  

h6. @-f --from <string>@

<blockquote>
Tell @glyrc@ where you want to get your metadata from.
You can get a full list of providers for each getter by running @glyrc -L@
The string you can pass here looks like this example for _cover_:
** @lastfm;google@
This would query @lastfm@ and @google@
Alternatively you may use the string @all@ in it:
** @all;-lastfm;@
All providers except @lastfm@ (therefore the minus) are used.
By default all built-in providers are used.
</blockquote>

h6. @-w --write <directory>@

<blockquote>
The directory where glyr will output the found items.
By default everything is written to the current working directory.
There are three special files:
** @stdout@
Outputs file to _stdout_
** @stderr@
Outputs file to _stderr_
** @null@
Outputs item nowhere
</blockquote> 

h6. @-p --parallel <integer>@

<blockquote>
How many providers may be queried in parallel, 
this is not necessarily the number of actual parallel downloads.
The default is _0_ where glyr will adjust this value itself.
</blockquote> 

h6. @-u --useragent <string>@

<blockquote>
The useragent that is used during HTTP requests.
This should be not empty, since it may break some providers.
</blockquote>

h6. @-r --redirects <integer>@

<blockquote>
The number of redirects that are allowed.
A value of _0_ is possible but might break some providers.
</blockquote>

h6. @-m --timeout <integer>@

<blockquote>
The maximum number of seconds to wait till a connection is canceled.
Generally, you shouldn't use this anyway.
</blockquote>

h6. @-x --plugmax <integer>@

<blockquote>
The maximum number of items a _provider_ may retrieve.
Use this to split up your search over several sources.
{color:red}Note: This might be removed in future releases.
</blockquote>

h6. @-v --verbosity <integer>@

<blockquote>
The verbosity level that is used by __libglyr__:
* 0: No output, but fatal errors.
* 1: Basic warnings.
* 2: Normal informal output
* 3: Basic debug output
* 4: Full debug output
</blockquote>

h6. @-h --help@

<blockquote>
The very short version of this text.
</blockquote>

h6. @-V --version@

<blockquote>
Print version string and exit.
</blockquote>

h6. @-d --download@

<blockquote>
For the getters @cover@ and @artistphoto@ only.
Will cause to libglyr to download found images,
which is also the default.
</blockquote>

h6. @-D --skip-download@

<blockquote>
For the getters @cover@ and @artistphoto@ only.
Do not download images, but return the full URL to them.
This makes libglyr act a bit like a search engine.
</blockquote>

h6. @-a --artist <string>@

<blockquote>
The artist you want to search for, it is needed for every _getter_.
@Libglyr@ will apply some basic formatting to strip things like "feat. XYZ"
</blockquote>

h6. @-b --album <string>@

<blockquote>
The album you want to search for, it is needed for the following _getters_:
* cover
* albumreview
* tracklist

Optional for these:
* tags
* relations

@Libglyr@ will apply some basic formatting to strip things like "CD01"
</blockquote>

h6. @-t --title <string>@

<blockquote>
The songtitle you want to search for, it is needed for the following _getters_:
* lyrics
* similarsongs

Optional for these:
* tags
* relations

@Libglyr@ will apply some basic formatting to strip things like "feat. (remix blahblah)"
</blockquote>

h6. @-e --maxsize <integer>@

<blockquote>
For the getters @cover@ and @artistphoto@ only.
The maximum size an image may have, assuming it to be quadratic.
</blockquote>

h6. @-i --minsize <integer>@

<blockquote>
For the getters @cover@ and @artistphoto@ only.
The minimum size an image may have, assuming it to be quadratic.
</blockquote>

h6. @-n --number <num>@

<blockquote>
How many items should be delivered, by default only one item is searched.
The number of results is not guaranteed to be _num_, but should be at max. _num_
A value of _0_ will cause @libglyr@ to deliver everything it finds.
</blockquote>

h6. @-t --lang <langcode>@

<blockquote>
Some providers offer localized content, or content only being available in certain countries.
Examples are: last.fm, amazon and google.
The language is given in ISO 639-1 codes like 'de' or 'en'.
Alternatively you can set it to 'auto', which will cause @libglyr@
to guess your language by your locale. 
This is the default behavior.
</blockquote>

h6. @-f --fuzzyness <integer>@

<blockquote>
@libglyr@ features fuzzy matching to enhance searchresults.
Look at the string *"Carl"* and the accidentally misstyped version *"Kalr"*:
Those strings will be compares using the "Levenshtein distance":http://en.wikipedia.org/wiki/Levenshtein_distance which basically counts
the number of edit, substitute and delete operations to transfrom *"Carl"* into "Kalr".
The distance in this case is 3 since three substitutions are needed.
The _fuzzyness_ parameter is the maximum distance two strings may have to match.
A high distance (like about 10) matches even badly misstyped strings, but also introduces bad results.
Low settings however will omit some good results.

The default values is currently _4_.
To be more secure some correction is applied:
* Adele - *19* 
* Adele - *21* 
* lv-distance = 2 which is <= 4
* But since the lv-distance is the same as the length "*21*" it won't match.

The easiest way to prevent this, is "to tag your music":http://musicbrainz.org/doc/MusicBrainz_Picard.

</blockquote>

h6. @-q --qsratio <float>@

<blockquote>
A float in the range [0.0..1.0].
It tells @libglyr@ how to weight quality and speed.
A value of 0.0 prefers fast providers, 1.0 high-quality providers.
The default is _0.85_.
</blockquote>

h6. @-k --proxy <proxystring>@

<blockquote>
The proxy to use, if any.
It is passed in the form: [protocol://][user:pass@]yourproxy.domain[:port]
*Example:*
* Proxy.fh-hof.de:3128
* http://hman:rootroot@godserve.com:666

Since internally libcurl is used the proxy may also read from env_vars like http_proxy automagically.
</blockquote>

h6. @-L --list@

<blockquote>
List all compiled in _providers_ and the corresponding _getter_.
</blockquote>

h6. @-F --formats <formatstring>@

<blockquote>
For the getters @cover@ and @artistphoto@ only.
The allowed formats for images, in a comma separated list.
*Example:*
* "png;jpeg"
* "png;jpeg;tiff;jpg;" (default) 

'jpeg' *and* 'jpg' because some websites return strange mimetypes (should be 'jpeg' only)
</blockquote>

h6. @-8 --force-utf8@

<blockquote>
For textitems only.
Some _providers_ (like_metrolyrics_) might return text with strange encodings,
that can not be converted to regular UTF8, but might return a subset of UTF8.
This options forces @libglyr@ to prohibit those.
</blockquote>

h6. @-j --callback <cmd>@

<blockquote>
Whenever a item is retrieved the command *cmd* is executed.
The command might contain the special string '<path>' that is 
expanded with the path to the item at runtime.

*Examples:*
* @cat <path>; echo@
Prints the items to the terminal.
* @rm <path>@
same as @-w null@
</blockquote>
