.TH "lib/translate.h" 3 "Sat Jun 25 2011" "Version 0.6" "libglyr" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/translate.h \- 
.PP
(do not use yet) Methods to interact directly with google translator  

.SH SYNOPSIS
.br
.PP
\fC#include 'types.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBGly_gtrans_translate\fP (\fBGlyQuery\fP *s, \fBGlyMemCache\fP *to_translate)"
.br
.RI "\fIInitiate translating. \fP"
.ti -1c
.RI "char * \fBGly_gtrans_lookup\fP (\fBGlyQuery\fP *s, const char *snippet, float *correctness)"
.br
.RI "\fILookup the language a certain snippet may be in. \fP"
.ti -1c
.RI "char ** \fBGly_gtrans_list\fP (\fBGlyQuery\fP *s)"
.br
.RI "\fIList all supported languages. \fP"
.in -1c
.SH "Detailed Description"
.PP 
(do not use yet) Methods to interact directly with google translator 

Do not use those yet. They should work fine, but are limited to 100000 chars/day(/IP?)
.PP
\fBAuthor:\fP
.RS 4
Christopher Pahl 
.RE
.PP
\fBVersion:\fP
.RS 4
0.6 
.RE
.PP
\fBDate:\fP
.RS 4
2011-06-14 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "char** Gly_gtrans_list (\fBGlyQuery\fP *s)"
.PP
List all supported languages. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP needed to determine the source/target language
.RE
.PP
Queries google for a list of all supported languages 
.br
 Returned as a list of char pointers, free both the 
.br
 single strings and the return value. 
.br
 If you only want to know all languages: 
.br
 'glyrc gtrans list' does the same. 
.br
.PP
\fBReturns:\fP
.RS 4
a list of strings, containg the language codes 
.RE
.PP

.SS "char* Gly_gtrans_lookup (\fBGlyQuery\fP *s, const char *snippet, float *correctness)"
.PP
Lookup the language a certain snippet may be in. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP needed to determine the source/target language
.br
 
.br
\fIsnippet\fP a short snippet (less than 500 signs) in the questionable language
.br
 
.br
\fIcorrectness\fP an optional pointer storing the correctness, or NULL
.br
.RE
.PP
Ask google what language the snippet given as const char is written in 
.br
 Optionally you can give a float pointer where the probability of the 
.br
 result being correct is stored in, (from 0.0 to 1.0), long snippets 
.br
 usually give better results. The result is returned as newly allocated 
.br
 char * - free it.
.PP
\fBReturns:\fP
.RS 4
the language code ('en',de",..) 
.RE
.PP

.SS "void Gly_gtrans_translate (\fBGlyQuery\fP *s, \fBGlyMemCache\fP *to_translate)"
.PP
Initiate translating. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP needed to determine the source/target language 
.br
\fIto_translate\fP Cache that gets modified with the translation.
.RE
.PP
Takes the cache struct to_translate and translate the text according to the setting stored in the \fBGlyQuery\fP s 
.br
 It will be translated IF to_translate is not an image (is_image == false) and the targetlang != sourcelang, 
.br
 and both languages are valid. Note that the usage of these functions is restricted by google to a certain limit 
.br
 being at the moment at 100,000 chars per day and IP.
.br
 The buffer is directly modified so make copies before if you need.
.br
 
.SH "Author"
.PP 
Generated automatically by Doxygen for libglyr from the source code.
