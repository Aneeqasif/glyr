.TH "GlyrQuery" 3 "Sun Aug 21 2011" "Version 0.8" "libglyr" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GlyrQuery \- 
.PP
Structure controlling all of libglyr's options'\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <types\&.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "enum \fBGLYR_GET_TYPE\fP \fBtype\fP"
.br
.ti -1c
.RI "int \fBnumber\fP"
.br
.ti -1c
.RI "int \fBplugmax\fP"
.br
.ti -1c
.RI "int \fBverbosity\fP"
.br
.ti -1c
.RI "size_t \fBfuzzyness\fP"
.br
.ti -1c
.RI "int \fBimg_min_size\fP"
.br
.ti -1c
.RI "int \fBimg_max_size\fP"
.br
.ti -1c
.RI "long \fBparallel\fP"
.br
.ti -1c
.RI "long \fBtimeout\fP"
.br
.ti -1c
.RI "long \fBredirects\fP"
.br
.ti -1c
.RI "bool \fBforce_utf8\fP"
.br
.ti -1c
.RI "bool \fBdownload\fP"
.br
.ti -1c
.RI "float \fBqsratio\fP"
.br
.ti -1c
.RI "struct {"
.br
.ti -1c
.RI "   enum \fBGLYR_ERROR\fP(* \fBdownload\fP )(\fBGlyrMemCache\fP *dl, struct 
.br
      \fBGlyrQuery\fP *s)"
.br
.ti -1c
.RI "   void * \fBuser_pointer\fP"
.br
.ti -1c
.RI "} \fBcallback\fP"
.br
.ti -1c
.RI "const char * \fBlang\fP"
.br
.RI "\fIanonymous struct holding the source and target lang for gtrans If source is NULL, autodetection will be enabled,
.br
 target has to be !NULL to enable translating \fP"
.ti -1c
.RI "const char * \fBproxy\fP"
.br
.ti -1c
.RI "char * \fBartist\fP"
.br
.ti -1c
.RI "char * \fBalbum\fP"
.br
.ti -1c
.RI "char * \fBtitle\fP"
.br
.ti -1c
.RI "char * \fBfrom\fP"
.br
.ti -1c
.RI "char * \fBallowed_formats\fP"
.br
.ti -1c
.RI "char * \fBuseragent\fP"
.br
.ti -1c
.RI "int \fBitemctr\fP"
.br
.ti -1c
.RI "char * \fBinfo\fP [10]"
.br
.ti -1c
.RI "bool \fBimagejob\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Structure controlling all of libglyr's options'\&. 

You should modify this with the glyr_opt_* methods,
.br
 You can read all members directly'\&.
.br
 Look up the corresponding glyr_opt_$name methods for more details'\&. For reading: Dynamically allocated members are stored in ''\&.alloc'! 
.SH "Field Documentation"
.PP 
.SS "char* \fBGlyrQuery::album\fP"album field 
.SS "char* \fBGlyrQuery::allowed_formats\fP"Allowed formats for images, given as semicolon sperated list 'png;jpeg;gif' 
.SS "char* \fBGlyrQuery::artist\fP"artist field 
.SS "struct { \&.\&.\&. }   \fBGlyrQuery::callback\fP"
.SS "bool \fBGlyrQuery::download\fP"return only urls without downloading, converting glyr to a sort of search engine 
.SS "enum \fBGLYR_ERROR\fP(*  \fBGlyrQuery::download\fP)(\fBGlyrMemCache\fP *dl, struct \fBGlyrQuery\fP *s)"
.SS "bool \fBGlyrQuery::force_utf8\fP"For textitems only; Only accept items with valid UTF8 encoding 
.SS "char* \fBGlyrQuery::from\fP"String passed to \fBglyr_opt_from()\fP 
.SS "size_t \fBGlyrQuery::fuzzyness\fP"Treshold for Levenshtein algorithm 
.SS "bool \fBGlyrQuery::imagejob\fP"
.SS "int \fBGlyrQuery::img_max_size\fP"Max size a image may have 
.SS "int \fBGlyrQuery::img_min_size\fP"Min size a image may have 
.SS "char* \fBGlyrQuery::info\fP[10]"Do not use! - A register where porinters to all dynamic alloc'\&. fields are saved'\&. Do not use'\&. 
.SS "int \fBGlyrQuery::itemctr\fP"Do not use! - Counter of already received items - you shouldn't need this 
.SS "const char* \fBGlyrQuery::lang\fP"
.PP
anonymous struct holding the source and target lang for gtrans If source is NULL, autodetection will be enabled,
.br
 target has to be !NULL to enable translating language settings (for amazon / google / last'\&.fm) 
.SS "int \fBGlyrQuery::number\fP"Number of items to download 
.SS "long \fBGlyrQuery::parallel\fP"Max parallel downloads 
.SS "int \fBGlyrQuery::plugmax\fP"Number of items a single provider may download 
.SS "const char* \fBGlyrQuery::proxy\fP"Proxy settings 
.SS "float \fBGlyrQuery::qsratio\fP"Weight speed or quality more, 0'\&.0 = fullspeed; 1'\&.0 = highest quality only 
.SS "long \fBGlyrQuery::redirects\fP"Max redirects for downloads 
.SS "long \fBGlyrQuery::timeout\fP"Max timeout for downloads 
.SS "char* \fBGlyrQuery::title\fP"title field 
.SS "enum \fBGLYR_GET_TYPE\fP \fBGlyrQuery::type\fP"What type of data to get 
.SS "void* \fBGlyrQuery::user_pointer\fP"
.SS "char* \fBGlyrQuery::useragent\fP"Useragent for HTTP Requests 
.SS "int \fBGlyrQuery::verbosity\fP"See \fBglyr_opt_verbosity()\fP for all levels 

.SH "Author"
.PP 
Generated automatically by Doxygen for libglyr from the source code'\&.
