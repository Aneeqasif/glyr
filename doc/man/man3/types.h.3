.TH "lib/types.h" 3 "Sat Jun 25 2011" "Version 0.6" "libglyr" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/types.h \- 
.PP
File containing all definitions used in the external API.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdlib.h>\fP
.br
\fC#include <stdbool.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBGlyMemCache\fP"
.br
.RI "\fIRepresents a single item. \fP"
.ti -1c
.RI "struct \fBGlyQuery\fP"
.br
.RI "\fIStructure controlling all of libglyr's options. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBDEFAULT_TIMEOUT\fP   20L"
.br
.ti -1c
.RI "#define \fBDEFAULT_REDIRECTS\fP   1L"
.br
.ti -1c
.RI "#define \fBDEFAULT_PARALLEL\fP   4L"
.br
.ti -1c
.RI "#define \fBDEFAULT_CMINSIZE\fP   125"
.br
.ti -1c
.RI "#define \fBDEFAULT_CMAXSIZE\fP   -1"
.br
.ti -1c
.RI "#define \fBDEFAULT_VERBOSITY\fP   0"
.br
.ti -1c
.RI "#define \fBDEFAULT_NUMBER\fP   1"
.br
.ti -1c
.RI "#define \fBDEFAULT_PLUGMAX\fP   -1"
.br
.ti -1c
.RI "#define \fBDEFAULT_LANG\fP   'en'"
.br
.ti -1c
.RI "#define \fBDEFAULT_DOWNLOAD\fP   true"
.br
.ti -1c
.RI "#define \fBDEFAULT_GROUPEDL\fP   true"
.br
.ti -1c
.RI "#define \fBDEFAULT_FROM_ARGUMENT_DELIM\fP   ';'"
.br
.ti -1c
.RI "#define \fBDEFAULT_DUPLCHECK\fP   true"
.br
.ti -1c
.RI "#define \fBDEFAULT_FUZZYNESS\fP   4"
.br
.ti -1c
.RI "#define \fBDEFAULT_FORMATS\fP   'jpg;jpeg;png'"
.br
.ti -1c
.RI "#define \fBDEFAULT_PROXY\fP   NULL"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBGlyMemCache\fP \fBGlyMemCache\fP"
.br
.RI "\fIRepresents a single item. \fP"
.ti -1c
.RI "typedef struct \fBGlyQuery\fP \fBGlyQuery\fP"
.br
.RI "\fIStructure controlling all of libglyr's options. \fP"
.ti -1c
.RI "typedef enum \fBGLYR_ERROR\fP(* \fBDL_callback\fP )(\fBGlyMemCache\fP *dl, struct \fBGlyQuery\fP *s)"
.br
.RI "\fItypefef for the \fBGlyOpt_dlcallback()\fP option \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBGLYR_GROUPS\fP { \fBGRP_NONE\fP =  0 << 0, \fBGRP_SAFE\fP =  1 << 0, \fBGRP_USFE\fP =  1 << 1, \fBGRP_SPCL\fP =  1 << 2, \fBGRP_FAST\fP =  1 << 3, \fBGRP_SLOW\fP =  1 << 4, \fBGRP_ALL\fP =  1 << 5 }"
.br
.ti -1c
.RI "enum \fBGLYR_ERROR\fP { \fBGLYRE_OK\fP, \fBGLYRE_BAD_OPTION\fP, \fBGLYRE_BAD_VALUE\fP, \fBGLYRE_EMPTY_STRUCT\fP, \fBGLYRE_NO_PROVIDER\fP, \fBGLYRE_UNKNOWN_GET\fP, \fBGLYRE_IGNORE\fP, \fBGLYRE_STOP_BY_CB\fP }"
.br
.RI "\fIAll possible errors that may be returned. \fP"
.ti -1c
.RI "enum \fBGLYR_GET_TYPE\fP { \fBGET_COVERART\fP =  1, \fBGET_LYRICS\fP =  2, \fBGET_ARTIST_PHOTOS\fP =  3, \fBGET_ARTISTBIO\fP =  4, \fBGET_SIMILIAR_ARTISTS\fP =  5, \fBGET_ALBUM_REVIEW\fP =  6, \fBGET_TRACKLIST\fP =  7, \fBGET_TAGS\fP =  8, \fBGET_RELATIONS\fP =  9, \fBGET_ALBUMLIST\fP =  10, \fBGET_UNSURE\fP =  11 }"
.br
.RI "\fIEnumeration of all getters, \fBGlyQuery\fP is initalized to GET_UNSURE. \fP"
.ti -1c
.RI "enum \fBGLYR_DATA_TYPE\fP { \fBTYPE_NOIDEA\fP, \fBTYPE_LYRICS\fP, \fBTYPE_REVIEW\fP, \fBTYPE_PHOTOS\fP, \fBTYPE_COVER\fP, \fBTYPE_COVER_PRI\fP, \fBTYPE_COVER_SEC\fP, \fBTYPE_AINFO\fP, \fBTYPE_SIMILIAR\fP, \fBTYPE_ALBUMLIST\fP, \fBTYPE_TAGS\fP, \fBTYPE_TAG_ARTIST\fP, \fBTYPE_TAG_ALBUM\fP, \fBTYPE_TAG_TITLE\fP, \fBTYPE_RELATION\fP, \fBTYPE_TRACK\fP }"
.br
.RI "\fIAll possible values the type field of \fBGlyMemCache\fP can have. \fP"
.in -1c
.SH "Detailed Description"
.PP 
File containing all definitions used in the external API. 

All defines/typedefs/enums/structs are here. Onyl dependency is stdlib/stdbool
.PP
\fBAuthor:\fP
.RS 4
Christopher Pahl 
.RE
.PP
\fBVersion:\fP
.RS 4
0.6 
.RE
.PP
\fBDate:\fP
.RS 4
2011-06-14 
.RE
.PP

.SH "Define Documentation"
.PP 
.SS "#define DEFAULT_CMAXSIZE   -1"
.SS "#define DEFAULT_CMINSIZE   125"
.SS "#define DEFAULT_DOWNLOAD   true"
.SS "#define DEFAULT_DUPLCHECK   true"
.SS "#define DEFAULT_FORMATS   'jpg;jpeg;png'"
.SS "#define DEFAULT_FROM_ARGUMENT_DELIM   ';'"
.SS "#define DEFAULT_FUZZYNESS   4"
.SS "#define DEFAULT_GROUPEDL   true"
.SS "#define DEFAULT_LANG   'en'"
.SS "#define DEFAULT_NUMBER   1"
.SS "#define DEFAULT_PARALLEL   4L"
.SS "#define DEFAULT_PLUGMAX   -1"
.SS "#define DEFAULT_PROXY   NULL"
.SS "#define DEFAULT_REDIRECTS   1L"
.SS "#define DEFAULT_TIMEOUT   20L"
.SS "#define DEFAULT_VERBOSITY   0"
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBGLYR_ERROR\fP(* \fBDL_callback\fP)(\fBGlyMemCache\fP *dl, struct \fBGlyQuery\fP *s)"
.PP
typefef for the \fBGlyOpt_dlcallback()\fP option \fBParameters:\fP
.RS 4
\fIDL_callback\fP A callback of the form: enum GLYR_ERROR cb(GlyMemCache * dl, struct GlyQuery * s)
.RE
.PP
\fBReturns:\fP
.RS 4
possibly an error or GLYRE_OK 
.RE
.PP

.SS "typedef struct \fBGlyMemCache\fP  \fBGlyMemCache\fP"
.PP
Represents a single item. It's used all over the program, and is the actual struct you're working with and you're wanting from libglyr. 
.SS "typedef struct \fBGlyQuery\fP  \fBGlyQuery\fP"
.PP
Structure controlling all of libglyr's options. You should modify this with the GlyOpt_* methods,
.br
 You can read all members directly.
.br
 Look up the corresponding GlyOpt_$name methods for more details. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBGLYR_DATA_TYPE\fP"
.PP
All possible values the type field of \fBGlyMemCache\fP can have. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fITYPE_NOIDEA \fP\fP
You shouldn't get this 
.TP
\fB\fITYPE_LYRICS \fP\fP
Lyrics. 
.TP
\fB\fITYPE_REVIEW \fP\fP
Album reviews 
.TP
\fB\fITYPE_PHOTOS \fP\fP
Pics showing a certain band 
.TP
\fB\fITYPE_COVER \fP\fP
Coverart 
.TP
\fB\fITYPE_COVER_PRI \fP\fP
A cover known to be the front side of the album 
.TP
\fB\fITYPE_COVER_SEC \fP\fP
A cover known to be the backside, inlet etc. 
.TP
\fB\fITYPE_AINFO \fP\fP
Artist bio 
.TP
\fB\fITYPE_SIMILIAR \fP\fP
Similiar artists 
.TP
\fB\fITYPE_ALBUMLIST \fP\fP
List of albums, each cache containing one name 
.TP
\fB\fITYPE_TAGS \fP\fP
List of (random) tags, each cache containing one name 
.TP
\fB\fITYPE_TAG_ARTIST \fP\fP
Tag associated with the artist 
.TP
\fB\fITYPE_TAG_ALBUM \fP\fP
Tag associated with the album 
.TP
\fB\fITYPE_TAG_TITLE \fP\fP
Tag associated with the album 
.TP
\fB\fITYPE_RELATION \fP\fP
Random relation, each cache containing one link 
.TP
\fB\fITYPE_TRACK \fP\fP
List of tracknames, each cache containing one name 
.SS "enum \fBGLYR_ERROR\fP"
.PP
All possible errors that may be returned. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIGLYRE_OK \fP\fP
everything is fine 
.TP
\fB\fIGLYRE_BAD_OPTION \fP\fP
you passed a bad option to Gly_setopt() 
.TP
\fB\fIGLYRE_BAD_VALUE \fP\fP
Invalid value in va_list 
.TP
\fB\fIGLYRE_EMPTY_STRUCT \fP\fP
you passed an empty struct to Gly_setopt() 
.TP
\fB\fIGLYRE_NO_PROVIDER \fP\fP
setttings->provider == NULL 
.TP
\fB\fIGLYRE_UNKNOWN_GET \fP\fP
settings->type is not valid 
.TP
\fB\fIGLYRE_IGNORE \fP\fP
If returned by callback, cache is ignored 
.TP
\fB\fIGLYRE_STOP_BY_CB \fP\fP
Callback returned stop signal. 
.SS "enum \fBGLYR_GET_TYPE\fP"
.PP
Enumeration of all getters, \fBGlyQuery\fP is initalized to GET_UNSURE. The type of metadata to get, names are selfexplanatory Requirements are given in braces, [] means optional. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIGET_COVERART \fP\fP
Get coverart for (artist|album) 
.TP
\fB\fIGET_LYRICS \fP\fP
Get lyrics for (artist|[album]|artist) 
.TP
\fB\fIGET_ARTIST_PHOTOS \fP\fP
Get pics for (artist) 
.TP
\fB\fIGET_ARTISTBIO \fP\fP
Get bio of (artist) 
.TP
\fB\fIGET_SIMILIAR_ARTISTS \fP\fP
Get similiar artists to (artist) 
.TP
\fB\fIGET_ALBUM_REVIEW \fP\fP
Get album review to (artist|album) 
.TP
\fB\fIGET_TRACKLIST \fP\fP
Get list of tracks for album (artist|album) 
.TP
\fB\fIGET_TAGS \fP\fP
Get tags (i.e. words like 'Metal') for (artist|[album]|[title]) 
.TP
\fB\fIGET_RELATIONS \fP\fP
Get relations (e.g. links to last.fm/wikipedia) for (artist|[album]|[title]) 
.TP
\fB\fIGET_ALBUMLIST \fP\fP
Get a list of albums by (artist) 
.TP
\fB\fIGET_UNSURE \fP\fP
Do nothing but relax 
.SS "enum \fBGLYR_GROUPS\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIGRP_NONE \fP\fP
None 
.TP
\fB\fIGRP_SAFE \fP\fP
Safe 
.TP
\fB\fIGRP_USFE \fP\fP
Unsafe, 
.TP
\fB\fIGRP_SPCL \fP\fP
Special, unsual providers 
.TP
\fB\fIGRP_FAST \fP\fP
Fast, maybe unsafe 
.TP
\fB\fIGRP_SLOW \fP\fP
Slow, exec'd at last 
.TP
\fB\fIGRP_ALL \fP\fP
All, when no groups are used 
.SH "Author"
.PP 
Generated automatically by Doxygen for libglyr from the source code.
