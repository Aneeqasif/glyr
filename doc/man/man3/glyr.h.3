.TH "lib/glyr.h" 3 "Wed Jun 15 2011" "Version 0.6" "libglyr" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/glyr.h \- 
.PP
All method declaration here. You should only need to include this file.  

.SH SYNOPSIS
.br
.PP
\fC#include 'types.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBGly_init\fP (void)"
.br
.RI "\fIcall this at startup. This is not threadsafe and Gly_cleanup should be called once for everytime you call Gly_init Actually this method is only there to initialize libcurl, glyr only depends on the settings struct. \fP"
.ti -1c
.RI "void \fBGly_cleanup\fP (void)"
.br
.RI "\fICall this at program termination. It's adviseable to call 'atexit(Gly_cleanup)' after \fBGly_init()\fP Not threadsafe also. \fP"
.ti -1c
.RI "\fBGlyMemCache\fP * \fBGly_get\fP (\fBGlyQuery\fP *settings, enum \fBGLYR_ERROR\fP *error, int *length)"
.br
.RI "\fIThe 'main' method of glyr. It starts the searching according to the settings in the settings param. \fP"
.ti -1c
.RI "void \fBGly_init_query\fP (\fBGlyQuery\fP *glyrs)"
.br
.RI "\fIInit's the \fBGlyQuery\fP structure to sane defaults. Call this after creating the variable. \fP"
.ti -1c
.RI "void \fBGly_destroy_query\fP (\fBGlyQuery\fP *sets)"
.br
.RI "\fIFree all memory associated with this query, and restore default settings. Do this always when you're done with this one. \fP"
.ti -1c
.RI "void \fBGly_free_list\fP (\fBGlyMemCache\fP *head)"
.br
.RI "\fIFree the memory in the GlyCacheList returned by Gly_get. \fP"
.ti -1c
.RI "\fBGlyMemCache\fP * \fBGly_new_cache\fP (void)"
.br
.RI "\fIReturns a newly allocated and initialized \fBGlyMemCache\fP, mostly for use with Gly_gtrans_* Don't forget to free it with Gly_free_cache. \fP"
.ti -1c
.RI "\fBGlyMemCache\fP * \fBGly_copy_cache\fP (\fBGlyMemCache\fP *source)"
.br
.RI "\fIProduces an exact copy of the \fBGlyMemCache\fP source. \fP"
.ti -1c
.RI "void \fBGly_free_cache\fP (\fBGlyMemCache\fP *c)"
.br
.RI "\fIFree the \fBGlyMemCache\fP pointed to by c. You should set it to NULL also, as using it after this will crash your program. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_dlcallback\fP (\fBGlyQuery\fP *settings, \fBDL_callback\fP dl_cb, void *userp)"
.br
.RI "\fISet the callback that is executed once an item is ready downloaded. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_type\fP (\fBGlyQuery\fP *s, enum \fBGLYR_GET_TYPE\fP type)"
.br
.RI "\fIWhat type of metadata to search for. Must be one of GLYR_GET_TYPE enum. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_artist\fP (\fBGlyQuery\fP *s, char *artist)"
.br
.RI "\fIThe artist field. libglyr will try to format it to fit the best. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_album\fP (\fBGlyQuery\fP *s, char *album)"
.br
.RI "\fIThe album field. libglyr will try to format it to fit the best. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_title\fP (\fBGlyQuery\fP *s, char *title)"
.br
.RI "\fIThe title field. libglyr will try to format it to fit the best. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_cmaxsize\fP (\fBGlyQuery\fP *s, int size)"
.br
.RI "\fIMaximum size a cover may have (assuming the cover is quadratic, only one size is required) \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_cminsize\fP (\fBGlyQuery\fP *s, int size)"
.br
.RI "\fIMinimum size a cover may have (assuming the cover is quadratic, only one size is required) \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_parallel\fP (\fBGlyQuery\fP *s, unsigned long val)"
.br
.RI "\fIThe number of items that may be downloaded in parallel. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_timeout\fP (\fBGlyQuery\fP *s, unsigned long val)"
.br
.RI "\fIAmout of seconds to wait before cancelling an download. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_redirects\fP (\fBGlyQuery\fP *s, unsigned long val)"
.br
.RI "\fIMax number of redirects to. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_lang\fP (\fBGlyQuery\fP *s, char *langcode)"
.br
.RI "\fISet the language the items should be in. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_number\fP (\fBGlyQuery\fP *s, unsigned int num)"
.br
.RI "\fISet the number of items to search. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_verbosity\fP (\fBGlyQuery\fP *s, unsigned int level)"
.br
.RI "\fISet libglyr's verbosity level (debug) \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_from\fP (\fBGlyQuery\fP *s, const char *from)"
.br
.RI "\fIDefine the providers you want to use. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_color\fP (\fBGlyQuery\fP *s, bool iLikeColorInMyLife)"
.br
.RI "\fIEnable colored log output. (Debug) \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_plugmax\fP (\fBGlyQuery\fP *s, int plugmax)"
.br
.RI "\fIDefine the maximum number of items a provider may download. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_download\fP (\fBGlyQuery\fP *s, bool download)"
.br
.RI "\fIDefine if image items (i.e, covers, photos) are downloaded. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_groupedDL\fP (\fBGlyQuery\fP *s, bool groupedDL)"
.br
.RI "\fIDefine wether searching happens in groups or everything or parallel (= false) \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_formats\fP (\fBGlyQuery\fP *s, const char *formats)"
.br
.RI "\fIDefine allowed image formats. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_fuzzyness\fP (\fBGlyQuery\fP *s, int fuzz)"
.br
.RI "\fISet the max. tolerance for fuzzy matching. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_duplcheck\fP (\fBGlyQuery\fP *s, bool duplcheck)"
.br
.RI "\fIEnable/Disable check for duplicate items. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_gtrans_source_lang\fP (\fBGlyQuery\fP *s, const char *source)"
.br
.RI "\fISet the source language for google translator or NULL to autodetect. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_gtrans_target_lang\fP (\fBGlyQuery\fP *s, const char *target)"
.br
.RI "\fISet the target language for google translator or NULL to disable. \fP"
.ti -1c
.RI "enum \fBGLYR_ERROR\fP \fBGlyOpt_proxy\fP (\fBGlyQuery\fP *s, const char *proxystring)"
.br
.RI "\fISet the proxy to use. \fP"
.ti -1c
.RI "const char ** \fBGlyPlug_get_name_by_id\fP (enum \fBGLYR_GET_TYPE\fP ID)"
.br
.RI "\fIGet a nullterminated list of available providers. \fP"
.ti -1c
.RI "const char * \fBGlyPlug_get_key_by_id\fP (enum \fBGLYR_GET_TYPE\fP ID)"
.br
.RI "\fIGet a nullterminated list of available providers, with their name as key. \fP"
.ti -1c
.RI "unsigned char * \fBGlyPlug_get_gid_by_id\fP (enum \fBGLYR_GET_TYPE\fP ID)"
.br
.RI "\fIGet a list of GroupIDs. \fP"
.ti -1c
.RI "\fBGlyMemCache\fP * \fBGly_download\fP (const char *url, \fBGlyQuery\fP *s)"
.br
.RI "\fIA convinience method to download the content at the URl $url, according to the settings in $s Actually only the redirect and timeout parameters are used here. \fP"
.ti -1c
.RI "const char * \fBGly_strerror\fP (enum \fBGLYR_ERROR\fP ID)"
.br
.RI "\fIMany methods use an returnvalue, or error parameters to inform you about errors Use this method to get a descriptive message you can print. \fP"
.ti -1c
.RI "const char * \fBGly_groupname_by_id\fP (enum \fBGLYR_GROUPS\fP ID)"
.br
.RI "\fIGet the name of a group as string. \fP"
.ti -1c
.RI "const char * \fBGly_version\fP (void)"
.br
.RI "\fIReturns versioning information, including compiletime. \fP"
.ti -1c
.RI "int \fBGly_write\fP (\fBGlyMemCache\fP *data, const char *path)"
.br
.RI "\fIWrites data to a specified path. \fP"
.in -1c
.SH "Detailed Description"
.PP 
All method declaration here. You should only need to include this file. 

All stable API of libglyr is right here.
.PP
\fBAuthor:\fP
.RS 4
Christopher Pahl 
.RE
.PP
\fBVersion:\fP
.RS 4
0.6 
.RE
.PP
\fBDate:\fP
.RS 4
2011-06-14 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void Gly_cleanup (void)"
.PP
Call this at program termination. It's adviseable to call 'atexit(Gly_cleanup)' after \fBGly_init()\fP Not threadsafe also. 
.SS "\fBGlyMemCache\fP* Gly_copy_cache (\fBGlyMemCache\fP *source)"
.PP
Produces an exact copy of the \fBGlyMemCache\fP source. \fBParameters:\fP
.RS 4
\fIsource\fP The \fBGlyMemCache\fP to copy
.RE
.PP
\fBReturns:\fP
.RS 4
A newly allocated \fBGlyMemCache\fP 
.RE
.PP

.SS "void Gly_destroy_query (\fBGlyQuery\fP *sets)"
.PP
Free all memory associated with this query, and restore default settings. Do this always when you're done with this one. \fBParameters:\fP
.RS 4
\fIsets\fP The \fBGlyQuery\fP to be destroyed 
.RE
.PP

.SS "\fBGlyMemCache\fP* Gly_download (const char *url, \fBGlyQuery\fP *s)"
.PP
A convinience method to download the content at the URl $url, according to the settings in $s Actually only the redirect and timeout parameters are used here. \fBParameters:\fP
.RS 4
\fIurl\fP The url to download as nullterminated string. Must be a vaild URL. 
.br
\fIs\fP A \fBGlyQuery\fP with the timeout and redirect values filled to your needs.
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBGlyMemCache\fP containing the data 
.RE
.PP

.SS "void Gly_free_cache (\fBGlyMemCache\fP *c)"
.PP
Free the \fBGlyMemCache\fP pointed to by c. You should set it to NULL also, as using it after this will crash your program. \fBParameters:\fP
.RS 4
\fIc\fP An allocated \fBGlyMemCache\fP 
.RE
.PP

.SS "void Gly_free_list (\fBGlyMemCache\fP *head)"
.PP
Free the memory in the GlyCacheList returned by Gly_get. \fBParameters:\fP
.RS 4
\fIhead\fP The GlyCacheList to be free'd 
.RE
.PP

.SS "\fBGlyMemCache\fP* Gly_get (\fBGlyQuery\fP *settings, enum \fBGLYR_ERROR\fP *error, int *length)"
.PP
The 'main' method of glyr. It starts the searching according to the settings in the settings param. \fBParameters:\fP
.RS 4
\fIsettings\fP The setting struct controlling glyr. (See the GlyOpt_* methods) 
.br
\fIerror\fP An optional pointer to an int, which gets filled with an error message, or GLYRE_OK on success 
.br
\fIlength\fP An optional pointer storing the length of the returned list
.RE
.PP
It takes a pointer to a \fBGlyQuery\fP struct filled to your needs via the GlyOpt_* methods,
.br
 Once an item is found the callback (set via GlyOpt_dlcallback) is called with the item as parameter.
.br
 After return all items are listed in a GlyCacheList ready to be accessed, remember to delete it with Gly_free_list when done.
.br
.PP
\fBReturns:\fP
.RS 4
A GlyCacheList containing all found data. See the struct reference for further details. 
.RE
.PP

.SS "const char* Gly_groupname_by_id (enum \fBGLYR_GROUPS\fPID)"
.PP
Get the name of a group as string. \fBParameters:\fP
.RS 4
\fIID\fP a member of the GLYR_GROUPS enum
.RE
.PP
GRP_FAST gets to 'fast',GRP_ALL to 'all' etc.
.br
 Use this to make strings from \fBGlyPlug_get_gid_by_id()\fP
.br
.PP
\fBReturns:\fP
.RS 4
A groupname as string or NULL if not found 
.RE
.PP

.SS "void Gly_init (void)"
.PP
call this at startup. This is not threadsafe and Gly_cleanup should be called once for everytime you call Gly_init Actually this method is only there to initialize libcurl, glyr only depends on the settings struct. 
.SS "void Gly_init_query (\fBGlyQuery\fP *glyrs)"
.PP
Init's the \fBGlyQuery\fP structure to sane defaults. Call this after creating the variable. \fBParameters:\fP
.RS 4
\fIglyrs\fP The fresh \fBGlyQuery\fP to be init'd. 
.RE
.PP

.SS "\fBGlyMemCache\fP* Gly_new_cache (void)"
.PP
Returns a newly allocated and initialized \fBGlyMemCache\fP, mostly for use with Gly_gtrans_* Don't forget to free it with Gly_free_cache. \fBReturns:\fP
.RS 4
A newly allocated \fBGlyMemCache\fP 
.RE
.PP

.SS "const char* Gly_strerror (enum \fBGLYR_ERROR\fPID)"
.PP
Many methods use an returnvalue, or error parameters to inform you about errors Use this method to get a descriptive message you can print. \fBParameters:\fP
.RS 4
\fIID\fP The returned error
.RE
.PP
\fBReturns:\fP
.RS 4
A descriptive nullterminated string, do not pass to free 
.RE
.PP

.SS "const char* Gly_version (void)"
.PP
Returns versioning information, including compiletime. Example: 
.br
 Version 0.4 (Larcenous Locust (dev)) of [May 20 2011] compiled at [19:12:37]
.PP
\fBReturns:\fP
.RS 4
A nullterminated string, do not free 
.RE
.PP

.SS "int Gly_write (\fBGlyMemCache\fP *data, const char *path)"
.PP
Writes data to a specified path. \fBParameters:\fP
.RS 4
\fIdata\fP The data to write. 
.br
\fIpath\fP The path to write data at.
.RE
.PP
Writes data to path $path, special values for $path can be 'stdout','stderr' or 'null',
.br
 which are pretty selfexplaining.
.PP
\fBReturns:\fP
.RS 4
An error id. 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_album (\fBGlyQuery\fP *s, char *album)"
.PP
The album field. libglyr will try to format it to fit the best. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIalbum\fP A nullterminated char, a copy of the string will be held internally so you can savely modify your version.
.RE
.PP
Required for the following getters:
.IP "\(bu" 2
albumlist
.IP "\(bu" 2
cover
.IP "\(bu" 2
review
.IP "\(bu" 2
tracklist 
.br
 Optional for those:
.IP "\(bu" 2
tags
.IP "\(bu" 2
relations
.PP
.PP
lyrics
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_artist (\fBGlyQuery\fP *s, char *artist)"
.PP
The artist field. libglyr will try to format it to fit the best. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in 
.br
\fIartist\fP A nullterminated char, a copy of the string will be held internally so you can savely modify your version.
.RE
.PP
This field is required for all getters. You are required to fill it.
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_cmaxsize (\fBGlyQuery\fP *s, intsize)"
.PP
Maximum size a cover may have (assuming the cover is quadratic, only one size is required) \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIsize\fP The max. size in pixel
.RE
.PP
Please note: libglyr takes this as a hint, and not as an absolute measure. You may find yourself with slightly oversized or undersized covers,
.br
 but generally overall in the range between cmin and cmax. Also, this only works for the 'cover' getter, not for 'photos'!
.br
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_cminsize (\fBGlyQuery\fP *s, intsize)"
.PP
Minimum size a cover may have (assuming the cover is quadratic, only one size is required) \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIsize\fP The min. size in pixel
.RE
.PP
Note: Also see \fBGlyOpt_cmaxsize()\fP
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_color (\fBGlyQuery\fP *s, booliLikeColorInMyLife)"
.PP
Enable colored log output. (Debug) \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIiLikeColorInMyLife\fP a boolean
.RE
.PP
Colored output only works in terminal with standard color support,
.br
 which means, non standard terminals like the MS commandline do not work.
.PP
\fBReturns:\fP
.RS 4
always GLYRE_OK 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_dlcallback (\fBGlyQuery\fP *settings, \fBDL_callback\fPdl_cb, void *userp)"
.PP
Set the callback that is executed once an item is ready downloaded. \fBParameters:\fP
.RS 4
\fIsettings\fP The \fBGlyQuery\fP settings struct to store this option in 
.br
\fIdl_cb\fP The callback to register, must have a prototype like this:
.br
 enum GLYR_ERROR my_callback(GlyMemCache * dl, struct GlyQuery * s); 
.br
\fIuserp\fP A pointer to a custom variable you can access inside the callback via s->callback.user_pointer;
.RE
.PP
Note that you can return a certain integer in the callback:
.br
 GLYRE_IGNORE: To not add this item to the results. GLYRE_OK: To add this item to the results and continue happily. GLYRE_STOP_BY_CB: To stop right now and return the results. The last element will NOT be added.
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_download (\fBGlyQuery\fP *s, booldownload)"
.PP
Define if image items (i.e, covers, photos) are downloaded. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIdownload\fP For image getters only.
.br
 If set to true images are also coviniently downloaded and returned.
.br
 Otherwise, just the URL is returned for your own use.
.br
.RE
.PP
Default to 'true', 'false' would be a bit more searchengine like.
.br
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_duplcheck (\fBGlyQuery\fP *s, boolduplcheck)"
.PP
Enable/Disable check for duplicate items. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIduplcheck\fP boolean flag, true enables, false disables
.RE
.PP
Actually there is no valid reason to set this to false,
.br
 except duplicate items are okay for you.
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_formats (\fBGlyQuery\fP *s, const char *formats)"
.PP
Define allowed image formats. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIformats\fP A comma seperated list of format specifiers, e.g. 'png;jpg;jpeg'
.RE
.PP
Awaits a string with a semicolon seperated list of allowed formats.
.br
 The case of the format is ignored.
.br
.PP
Example:
.br
 'png;jpg;jpeg' would allow png and jpeg.
.br
.PP
You can also specify 'all', which disables this check.
.br
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_from (\fBGlyQuery\fP *s, const char *from)"
.PP
Define the providers you want to use. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIfrom\fP a string, see below
.RE
.PP
Use this to define what providers you want to use.
.br
 Every provider has a name and a key which is merely a shortcut for the name.
.br
 Specify all providers in a semicolon seperated list.
.br
 Type 'glyrc -H' for a complete list of all providers for each getter.
.br
.PP
Example:
.br
 'amazon;google' 
.br
 'a;g' - same with keys
.br
.PP
You can also prepend each word with a '+' or a '-' ('+' is assumend without),
.br
 which will add or remove this provider from the list respectively.
.br
 Additionally you may use the predefined groups 'safe','unsafe','fast','slow','special'.
.br
.PP
Example:
.br
 '+fast;-amazon' which will enable last.fm and lyricswiki.
.br
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_fuzzyness (\fBGlyQuery\fP *s, intfuzz)"
.PP
Set the max. tolerance for fuzzy matching. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIfuzz\fP Set the maximum amount of inserts, edits and substitutions, a search results
.br
 may differ from the artist and/or album and/or title.
.br
 The difference between two strings is measured as the 'Levenshtein distance',
.br
 i.e, the total amount of inserts,edits and substitutes needed to convert string a to b.
.br
.RE
.PP
Example:
.br
 'Equilibrium' <=> 'Aqilibriums' => Distance=3
.br
 With a fuzzyness of 3 this would pass the check, with 2 it won't.
.br
.PP
Higher values mean more search results, but more inaccuracy. 
.br
 Default is 4.
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_groupedDL (\fBGlyQuery\fP *s, boolgroupedDL)"
.PP
Define wether searching happens in groups or everything or parallel (= false) \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIgroupedDL\fP boolean to toggle this
.RE
.PP
If set false, this will disable the grouping of providers.
.br
 By default providers are grouped in categories like 'safe','unsafe','fast' etc., which
.br
 are queried in parallel, so the 'best' providers are queried first.
.br
 Disabling this behaviour will result in increasing speed, but as a result the searchresults
.br
 won't be sorted by quality, as it is normally the case.
.br
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_gtrans_source_lang (\fBGlyQuery\fP *s, const char *source)"
.PP
Set the source language for google translator or NULL to autodetect. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIsource\fP A nullterminated pointer to char.
.RE
.PP
You can use 'glyrc gtrans list' or the \fBGly_gtrans_list()\fP method,
.br
 to get a list of all valid values.
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_gtrans_target_lang (\fBGlyQuery\fP *s, const char *target)"
.PP
Set the target language for google translator or NULL to disable. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fItarget\fP By default this feature is disabled (target == NULL)
.br
 Use the methods in \fBlib/translate.h\fP to use the corresponding methods directly.
.RE
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_lang (\fBGlyQuery\fP *s, char *langcode)"
.PP
Set the language the items should be in. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIlangcode\fP The language used for providers with multilingual content. It is given in ISO-639-1 codes, i.e 'de','en','fr' etc.
.RE
.PP
List of providers recognizing this option:
.br
 * cover/amazon (which amazon server to query) * cover/google (which google server to query) * ainfo/lastfm (the language the biography shall be in)
.br
.PP
(Use only these providers if you really want ONLY localized content)
.br
 If no language specified the language defaults to english ('en')
.PP
Note1: This only works with a few providers, which should be set via \fBGlyOpt_from()\fP Note2: Don't coinfuse this with the built-in google translator's settings.
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_number (\fBGlyQuery\fP *s, unsigned intnum)"
.PP
Set the number of items to search. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fInum\fP the number as an integer
.RE
.PP
How many items to search for (1 to INT_MAX)
.br
 This is not the number of items actually returned then,
.br
 because libglyr is not able to find 300 songtexts of the same song,
.br
 or libglyr filters duplicate items before returning.
.br
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_parallel (\fBGlyQuery\fP *s, unsigned longval)"
.PP
The number of items that may be downloaded in parallel. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIval\fP the number as unsigned long
.RE
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_plugmax (\fBGlyQuery\fP *s, intplugmax)"
.PP
Define the maximum number of items a provider may download. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIplugmax\fP Use this to scatter the results over more providers, to get different results.
.br
 You can set it also to -1 what allows an infinite number of items (=> default)
.RE
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_proxy (\fBGlyQuery\fP *s, const char *proxystring)"
.PP
Set the proxy to use. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIproxystring\fP the proxy setting.
.RE
.PP
NULL for none, otherwise see the documentation of curl_easy_setopt(CURLOPT_PROXY) how to set this. Synatx: [protocol://][user:pass@]Domain[:port] Example: 'http://Proxy.fh-hof.de:3128'
.PP
If empty the global env $http_proxy shall be used, if present.
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_redirects (\fBGlyQuery\fP *s, unsigned longval)"
.PP
Max number of redirects to. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIval\fP an unsigned integer
.RE
.PP
A value of 0 is allowed, but may break certain plugins.
.br
 Default = 1
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_timeout (\fBGlyQuery\fP *s, unsigned longval)"
.PP
Amout of seconds to wait before cancelling an download. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIval\fP Timeout in seconds.
.RE
.PP
If more than one item is downloaded in parallel, the timeout will be changed accordingly.
.br
 Default is 20 seconds.
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_title (\fBGlyQuery\fP *s, char *title)"
.PP
The title field. libglyr will try to format it to fit the best. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fItitle\fP A nullterminated char, a copy of the string will be held internally so you can savely modify your version.
.RE
.PP
Required for:
.IP "\(bu" 2
lyrics Optional for:
.IP "\(bu" 2
tags
.IP "\(bu" 2
relations
.PP
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_type (\fBGlyQuery\fP *s, enum \fBGLYR_GET_TYPE\fPtype)"
.PP
What type of metadata to search for. Must be one of GLYR_GET_TYPE enum. \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in 
.br
\fItype\fP A member of the GLYR_GET_TYPE enum, set this before you set anything else.
.RE
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "enum \fBGLYR_ERROR\fP GlyOpt_verbosity (\fBGlyQuery\fP *s, unsigned intlevel)"
.PP
Set libglyr's verbosity level (debug) \fBParameters:\fP
.RS 4
\fIs\fP The \fBGlyQuery\fP settings struct to store this option in. 
.br
\fIlevel\fP The level as an integer, see description below
.RE
.PP
0) nothing but fatal errors.
.br
 1) warnings and important notes.
.br
 2) normal, additional information what libglyr does.
.br
 3) basic debug output.
.br
 4) libcurl debug output.
.br
.PP
\fBReturns:\fP
.RS 4
an errorID 
.RE
.PP

.SS "unsigned char* GlyPlug_get_gid_by_id (enum \fBGLYR_GET_TYPE\fPID)"
.PP
Get a list of GroupIDs. \fBParameters:\fP
.RS 4
\fIID\fP What type to get, or GET_UNSURE for a list of getters
.RE
.PP
You can use the groupid to determine in whatt group this provider is.
.br
 You will not use this function in 99.9% of all cases, but it can be useful to translate user input
.br
 to glyr's represantation, or to list groups as glyrc does. GET_UNSURE will result in a list of all GET_* enumerators (i.e. GET_COVER...GET_UNSURE)
.br
.PP
\fBReturns:\fP
.RS 4
.. 
.RE
.PP

.SS "const char* GlyPlug_get_key_by_id (enum \fBGLYR_GET_TYPE\fPID)"
.PP
Get a nullterminated list of available providers, with their name as key. \fBParameters:\fP
.RS 4
\fIID\fP What type to get, or GET_UNSURE for a list of getters
.RE
.PP
A string is returned with all keys of this getter.
.br
 Example: 
.br
 'lawgbdmc\\\\0', where 'a' stands for amazon.
.br
 You can use them (or their full names is \fBGlyOpt_from()\fP
.br
.PP
\fBReturns:\fP
.RS 4
a nullterminated list of available providers 
.RE
.PP

.SS "const char** GlyPlug_get_name_by_id (enum \fBGLYR_GET_TYPE\fPID)"
.PP
Get a nullterminated list of available providers. \fBParameters:\fP
.RS 4
\fIID\fP What type to get, or GET_UNSURE for a list of getters
.RE
.PP
A list is returned with all providernames for this type.
.br
 Example:
.br
 {'last.fm','amazon',...,'coverhunt',NULL}; 
.br
 You can use this in \fBGlyOpt_from()\fP
.br
.PP
\fBReturns:\fP
.RS 4
a nullterminated list of available providers 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for libglyr from the source code.
