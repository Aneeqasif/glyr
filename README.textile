<h1>_Glyr_ is a searcheninge for musicrelated metadata</h1>

It comes both in a commandline interface tool and as a C library, both with an easy to use interface.
The sort of metadata glyr is searching (and downloading) is usually the data you see in your musicplayer.
And indeed, originally it was written to serve as internally library for a musicplayer, but has been extended to 
work as a standalone program which is able to download:
* cover art
* lyrics
* bandphotos
* artist biography
* album reviews 
* tracklists of an album
* and a list of albums from a specific artist.
* Tags, either related to artist, album or title.

*Terminology*:
To prevent disambiguation the following terms are used below: 	
* _glyrc_ is the commandline interface to libglyr.
* _libglyr_ is the library behind, which may be used by your program.
* a _getter_ is a type of metadata to download, e.g. @cover@
* a _provider_ is a source libglyr queries in order to find the data.
* a __group__ is a collection of __provider__ with similiar attributes (e.g. "__fast__" or "__safe__")

<h2>FEATURES</h2>
* Always having more than fallback, and a hit rate of approx. 97% for coverdownload
* Portable: Windows and Linux are supported (Developement on Linux) see [1] for Mac OSX, 
* Fuzzy matching: Search providers with Levenshtein algorithm to eliminate typos and enhance search results.
* Fast Download: libcurl is used internally, and sources are searched in parallel, unneeded data is not downloaded if possible.
* Almost no dependencies: Just libcurl which is widely available.
* Download of a user defined amount of items, @glyrc cover -a Foo -b Bar -n 30@ loads 30 covers of album 'Bar' by artist 'Foo'
* grouped download: Query providers by descending Accuray / Speed
* Optional download of images, URL is returned otherwise
* Prefers trustable sources (for example last.fm)
* Check for duplicate URLs, empty images and links known to be bad.
* Free Software licensed under the terms of the GPLv3
* libglyr is portable,easy,threadsafe and lowlevel enough for everyone. 

<h2>GETTING STARTED</h2>

<h3>Compiling</h3>
See the "compile page":https://github.com/sahib/glyr/wiki/Compiling.

<h3>libglyr</h3>
See the "API Reference":https://github.com/sahib/glyr/wiki/API
Please note: The Api won't be guaranteed to be stable before version 0.9.

<h3>glyrc:</h3>
Please refer to @glyrc --usage@ which is more up-to-date.

<h2>FAQ</h2>
<h3>Glyr.. such a silly name! Why?</h3>
Indeed. Should have named it 'Glyros'.

<h3>How..how am I suppose to be used to it?<h3>
Well, as normal user you could use @glyrc@ to retrieve some metadata in a batchlike fashion.
As developers you have lots of option, you could write glyr-plugins for musicplayers (gmpc!), set up a webserver with this,
hack up little scripts showing covers on the desktop.. everything related to musicmetadat is possible here.
You could also extend libglyr itself but that's a little harder.

<h3>Isn't there musicbrainz already?</h3>
1) The kind of metadata downloaded by glyr differs heavily from musicbrainz.
   i.e. glyr finds metadata for musicplayers while musicbrainz finds data for CD Rippers and taggers.

2) Musicbrainz runs remotely on some server and uses a large database which is searched through lucene.
   Glyr is a client program which hops over several sites and does not cache anything, unless you do it yourself.
   You could of course let glyr run on a (remote) server, and cache all results to do something similiar.

<h2>AUTHOR</h2>
See the AUTHORS file that comes in glyr's distribution.
See also COPYING to know about your rights.

<h2>CAN I HELP?</h2>
Libglyr is no finished software, as I write it in my free time and the same version may work the one day, but not the other, as Online APIs are changing.
This is the reason why I found fallbacks so important, where possible more than one provider is queried.

So: <b>Expect bugs!</b>

<h3>BUGS</h3>
If you found one: Not so good!
If you file a bugreport: Good!

Use the "Issue Tracker":https://github.com/sahib/glyr/issues to share your find.
Alternatively you may drop me a mail at <sahib@online.de>

<h3>PATCHES</h3>
If you hacked one: Excellent! Send it to me via mail or see below.
If you want to add new providers you should look at the existing provider prlugins to get an idea how to write one.
Starting with lib/cover/lastfm.c isn't a bad idea either, because it is one of the very simple ones.

__Take the usual Git(Hub) approach:__
- Fork this project
- Make your changes
- Make a Pull request

If you're not familiar with git, or just don't like it,
you can also drop me a mail: <sahib@online.de>

Thanks for any help in advance!

<h3>DONATE</h3>
You also might consider a small (CS-Students are already motivated by 1 Cent <img src="http://www.blendpolis.de/images/smilies/icon_wink.gif"/>) donation if you use any of my software in a commercial environement:<a class="FlattrButton" style="display:none;" rev="flattr;button:compact;" href="https://github.com/sahib/glyr"></a>
<noscript><a href="http://flattr.com/thing/302682/libglyr" target="_blank">
<img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a></noscript>
(For now only possible via Flattr, you gonna need an account there - Sorry)





<h4>@footnotes@</h4>     
[1] Glyr has not been tested on Mac OSX yet. If you own such an Apple device any help with 'porting' glyr is highly appreciated. My guess would be that no to almost no changes have to be done.
